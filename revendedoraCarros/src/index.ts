import { app, BrowserWindow, ipcMain } from 'electron';
import Veiculo from './models/Veiculo';
import VeiculoRepository from './repository/VeiculoRepository';
import UserRepository from '../src/repository/UserRepository'
import Usuario from './models/Usuario';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

let mainWindow : BrowserWindow 

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL('http://localhost:3000/login');

  // Open the DevTools.
  mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);


// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
ipcMain.handle('create', async(event: any, veiculo: any)=>{
  console.log(veiculo)
  const {id, modelo, cor, ano, preco, imagem} = veiculo
  const novoVeiculo = new Veiculo(modelo, cor, ano, preco, imagem, id);
  new VeiculoRepository().salvarVeiculoNoBanco(novoVeiculo);
})

ipcMain.handle('render', async () => {
  return new VeiculoRepository().mostrarVeiculos();
})

ipcMain.handle('find', async (_: any, id: string) => {
  return new VeiculoRepository().procurarVeiculo(id);
})

ipcMain.handle('delete', async(_: any, id: string) => {
  await new VeiculoRepository().deletarVeiculo(id);
})

ipcMain.on('show-about', (_: any, id: string) =>{
 mainWindow.loadURL(`http://localhost:3000/detalhes?id=${id}`)
})


ipcMain.on('return-home', () =>{
  mainWindow.loadURL('http://localhost:3000/main_window')
})

ipcMain.handle('createUser',async (_: any, usuario: any) => {
  const {nome_usuario, data_nascimento, email_user, senha} = usuario
  const novoUser = new Usuario(nome_usuario, data_nascimento, email_user, senha);
  await new UserRepository().salvarUsuarioNoBanco(novoUser);
})
